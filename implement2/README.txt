Our team members are Michael Anderson and Adam Callahan.


This package contains the following files:

vocabulary.txt, newsgrouplabel.txt, train.label, test.label, train.data,
test.data: These files comprise the dataset given to us, and are unmodified.

stoplist.txt: A stoplist of non-informative commonly occurring words that we
pulled from a Naive Bayes project implemented in a previous CS class.

implement.py: Our classifier, described below.


Our classifier is implemented in Python v. 2.6.6, but we do not use any
particularly exotic Python functionality, so our code should run on earlier
2.X versions of Python. It may be run from the command line in the following
way:

implement.py model [flags]


    model - Takes the value 'b' for the Bernoulli model, or 'm' for the
            Multinomial model.

    The following optional flags can be given in any order:

        -h1=K  - Use heuristic 1: Throw all words out of the training and
                 testing data that occur with frequency < K in the training
                 data.

        -h2    - Use heuristic 2: Throw all words out of the training and
                 testing data that are in the given stoplist of common and
                 non-informative words.

        -train - Classify the training data instead of the testing data.


Example use-cases:

implement.py m

    - Classify the test data using the Multinomial model.

implement.py b -train

    - Classify the training data using the Bernoulli model.

implement.py m -h1=5 -train

    - Classify the training data using the Multinomial model, throwing out all
      words in the vocabulary that appear less than 10 times in the vocabulary.

implement.py b -h1=10 -h2

    - Classify the test data using the Bernoulli model. Throw out all words in
      vocabulary that appear less than 10 times, and throw out all words in the
      stoplist.


implement.py generates a file confusion.txt, which contains the confusion
matrix generated by our classifier. Row values in the matrix represent true
labels, and column values represent predicted labels.
